import os
import sys
import SCons
from SCons import Script

project_name = "audiodecoder"
platform_is_macosx = False
platform_is_windows = False
platform_is_linux = False
platform_is_ios = False

#TODO: Make this a compile flag
debug = False
if int(ARGUMENTS.get('debug', 0)):
    debug = True 

if int(ARGUMENTS.get('ios', 0)):
	platform_is_ios = True
elif sys.platform == 'darwin':
    platform_is_macosx = True
elif sys.platform == 'win32':
    platform_is_windows = True
elif sys.platform == 'linux2':
    platform_is_linux = True

if platform_is_macosx or platform_is_linux or platform_is_ios:
    install_root = "/usr/local"
    install_lib_dir     = install_root + "/lib";
    install_headers_dir = install_root + "/include/" + project_name    
else:
    if debug:
        install_root = '#../beatcleaver-winlib/win32lib-msvc90-debug'
    else:
        install_root = '#../beatcleaver-winlib/win32lib-msvc90-release'
    #install_root = 'C:/libaudiodecoder/examples/msvc2008_demo/Debug'
    install_lib_dir     = install_root;
    install_headers_dir = install_root + "/" + project_name    
    

tools = ['default']
toolpath = ['#build/']
extra_arguments = {}

env = Script.Environment(tools=tools, toolpath=toolpath, ENV=os.environ,
                              **extra_arguments)

# Import environment variables from the terminal. Note that some
# variables correspond to variables inside the SCons env with different
# names, eg. the shell's "CFLAGS" ---> SCons' "CCFLAGS".
if os.environ.has_key('CC'):
    env['CC'] = os.environ['CC']
if os.environ.has_key('CFLAGS'):
    env['CCFLAGS'] += SCons.Util.CLVar(os.environ['CFLAGS'])
if os.environ.has_key('CXX'):
    env['CXX'] = os.environ['CXX']
if os.environ.has_key('CXXFLAGS'):
    env['CXXFLAGS'] += SCons.Util.CLVar(os.environ['CXXFLAGS'])
if os.environ.has_key('LDFLAGS'):
    env['LINKFLAGS'] += SCons.Util.CLVar(os.environ['LDFLAGS'])

# Setup source and include paths
env.Append(CPPPATH= ['#src', '#include'])

# General C++ compiler flags
if platform_is_linux or platform_is_macosx:
    env.Append(CPPFLAGS = '-g')  #Debug mode

# Mac OS X compiler/linker flags
if platform_is_macosx:
    env.Append(SHLINKFLAGS='-install_name ' + install_lib_dir + '/lib' + project_name + '.dylib') #Mac OS X only! Note the '/lib' there is not a mistake - it gives the libaudiodecoder.dylib the prefix!

    # CoreAudio
    env.Append(CPPPATH='/System/Library/Frameworks/AudioToolbox.framework/Headers/')
    env.Append(CPPPATH='#include/apple/')
    env.Append(LINKFLAGS='-framework AudioToolbox -framework CoreFoundation')
   	# universal
    env.Append(LINKFLAGS='-arch i386 -arch x86_64')
    env.Append(CXXFLAGS='-arch i386 -arch x86_64')
    env.Append(CXXFLAGS='-std=c++98')
    env.Append(CXXFLAGS='-stdlib=libstdc++')

if platform_is_ios:
	env['CXX'] = 'c++'
	env.Append(CXXFLAGS='-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.1.sdk -arch armv6 -arch armv7')
	env.Append(LINKFLAGS='-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.1.sdk -arch armv6 -arch armv7 -framework AudioToolbox -framework CoreFoundation')

if platform_is_windows:
    env.Append(LIBPATH='C:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\\Lib')
    env.Append(CPPPATH='C:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\\Include')

if not env.GetOption('clean') and not SCons.Util.containsAny(os.sys.argv, ['-h', '--help']):
    conf = Configure(env)

    #Note: SCons' CheckLib doesn't let you check for Mac OS X Frameworks, so we just hardcoded
    #      the Mac dependencies in above

    # Must use the _vista prefix if targeted Vista and above (instead of 7 and 
    # above) for Media Foundation.
    # See: http://msdn.microsoft.com/en-us/library/windows/desktop/ee663600(v=vs.85).aspx#LibraryChangesWin7
    if platform_is_windows:
        wmfError = 'Did not find Windows Media Foundation .lib files. Do you have the Windows 7 Platform SDK installed?';
        if not conf.CheckLib('Mf_vista'):
            print wmfError
            Exit(1)
        if not conf.CheckLib('Mfplat_vista'):
            print wmfError
            Exit(1)
        if not conf.CheckLib('mfreadwrite'):
            print wmfError
            Exit(1)
        if not conf.CheckLib('mfuuid'):
            print wmfError
            Exit(1)        
        if not conf.CheckLib('ole32'):
            print "Did not find ole32."
            Exit(1)            
    env = conf.Finish()

sources = Split(""" audiodecoderbase.cpp """)
if platform_is_macosx or platform_is_ios:
    sources += Split(""" audiodecodercoreaudio.cpp """)
elif platform_is_windows:
    sources += Split(""" audiodecodermediafoundation.cpp """)

#Glob("*.cpp"); 
public_headers = Glob("#include/*")
objs = [] 
objs.append(env.SharedObject(sources)) 

#Must be done after the configure section
if platform_is_windows:
    if debug:
        env['PDB'] = 'audiodecoder.pdb' # causes scons to generate a pdb database for windows debugging
        env.Append(CXXFLAGS  = '/MDd')
    else:
        env.Append(CXXFLAGS  = '/MD')

#project_lib = env.SharedLibrary(target=project_name, source=objs)
project_lib = env.StaticLibrary(target=project_name, source=objs)

install_lib_target =     env.Install(dir=install_lib_dir, source=[project_lib])
install_headers_target = env.Install(dir=install_headers_dir, source=[public_headers]) 
env.Alias('install', install_lib_target);
env.Alias('install', install_headers_target);

